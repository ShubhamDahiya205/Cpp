Time Complexity 	: rate at which time taken increases w.r.t input size
Big O notations O(3n)	: worst case/ upper bound complexity
Omega notation 		: best case/ lower bound complexity
Theta 	       		: average case (mean of both)

Space Complexity	: auxillary space (space taken to solve the problem) + input space (space taken to store the problem)

Never modify the input until specifically mentioned

Whenever division is happening : n / 10, again and again, O(log10(n))
n/2 > O(log2(n))

Basic Maths : 
1. Extraction of digits(% 10 and / 10)
2. Divisors (root(n))
3. Patterns (loop1_rows-loop2_columns)
4. GCD (pn , qn and (p-q)n all have same gcd, and Lcm * Hcf = a * b)

Recursion : Calling of function, base case, stack overflow, Recursion Tree, Parametrized & Functional Recursion

Joshephus Problem : (index + k) % len  : For Maintaining Circularity

Hashing : pre-storing and fetching : Array O{n), Map : O(logn), Unordered Map : usually O(1), in case of collision O(n)
Divison Method of hashing : count is stored at index (number%10)
linear chaining method : instead of count, we store the numbers at (num%10), for freq, we count freq of no. at that index
if all the elements go to the same hash index, we will call it a case of collision.


